= shubox - A framework to create sandboxes for test-driven learning

http://github.com/bobbyno/shubox/tree/master

More on Test-Driven Learning: http://www.bobbynorton.com/?p=36

== DESCRIPTION

Test-driven learning is a way to master a programming language by writing unit tests around its API's.
shubox lowers the barrier to entry for test-driven learning by providing a basic infrastructure in which
to start coding: A directory structure, some classes and unit tests to get started, and a build script.

shubox currently creates environments for Ruby and Java, but can easily be extended to any language that
lends itself to unit testing. shubox is built on newgem, so extending the framework is as simple as creating
new generator scripts.

== INSTALL

The <code>shubox</code> application is distributed as a RubyGem and is available immediately after installation.

<code>$ gem sources -a http:http://gems.github.com</code>

<code>$ sudo gem install bobbyno-shubox</code>

Alternately, download the gem and install manually from github.

== RUBY USAGE

Ruby is the default language option in shubox:

<code>$ shubox /tmp/learn_ruby</code>

<code>$ cd /tmp/learn_ruby</code>

<code>$ rake</code>

If all goes well, you should start off with some passing tests. Write new learning tests, 
naming each method with the intent of the lesson. Write the code that makes a test pass. 

Now run script/clean. Cleaners will reset test files by deleting the method bodies. 
Can you complete the lesson from memory? If so, can you do so faster than before? 
If not, you may need to study the concept more closely. 

Repeat a test-driven lesson until you can easily rewrite it from scratch. Once you can do so, 
you may move on to another lesson. 

This is repetition with a retrieval step, which leads to long-term retention.

== JAVA USAGE

shubox supports Java:

<code>$ shubox -l=java /tmp/LearnJava</code>

<code>$ cd /tmp/LearnJava</code>

<code>$ ant -f build/build.xml</code>

The Java command will also generate a <project name>.ipr file to allow the project to easily be
opened in IntelliJ 8.

shubox does not currently include a JUnit cleaner script. Patches welcome. ;-)

== APPLICATION ARCHITECTURE

shubox is organized as a set of generators, as in newgem and RubiGen. 

app_generators are where we define the basic environment for one of our supported languages.

cleaner_generators hold the test framework cleaning implementations to reset tests. 
In the future, these can be mixed and matched to support polyglots like JRuby by installing both 
JUnit and Test::Unit cleaners. Run script/generate in a generated shubox to see the list of 
available cleaners and generators that can be installed.

cleaner/lib folders hold the implementations of the cleaners referenced in the clean_xxx files 
copied to the generated application. This makes it easy to upgrade existing shuboxes.

== REQUIREMENTS

* newgem

== CONTRIBUTORS

Initial concept - Bobby Norton

bendyworks for {Test::Unit cleaner patch}[http://github.com/bendyworks/shubox]

== THANKS!

{DRW Trading Group}[http://www.drwtrading.com] for time and feedback

Test-Driven Learning Attendees at {SCNA 2009}[http://scna.softwarecraftsmanship.org/schedule#bobby_norton]

Dr. Nic Williams for newgem and rubigen: {RubyConf 2007 Presentation}[http://rubyconf2007.confreaks.com/d3t1p1_rubigen.html]

Jim Weirich and EdgeCase for {ruby_koans}[http://github.com/edgecase/ruby_koans]



