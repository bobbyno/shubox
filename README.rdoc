= shubox - A framework to create sandboxes for test-driven learning

http://github.com/bobbyno/shubox/tree/master

More on Test-Driven Learning: http://www.bobbynorton.com/?p=36

== DESCRIPTION:

Test-driven learning is a way to master a programming language by writing unit tests around its API's.
shubox lowers the barrier to entry for test-driven learning by providing a basic infrastructure in which
to start coding: A directory structure, some classes and unit tests to get started, and a build script.

== INSTALL:

The <code>shubox</code> application is distributed as a RubyGem and is available immediately after installation.

<code>$ gem sources -a http:http://gems.github.com</code>

<code>$ sudo gem install bobbyno-shubox</code>

Alternately, download the gem and install manually from github.

== BASIC USAGE:

Go to the folder where you want to create your new test sandbox, and run the <code>shubox</code> command
to generate your test scaffolding.

The default is Ruby:

<code>$ cd ~/ruby_projects</code>

<code>$ shubox learning_ruby</code>

<code>$ rake</code>

shubox also supports Java:

<code>$ cd ~/java_projects</code>

<code>$ shubox -j LearnJava</code>

<code>$ ant -f build/build.xml</code>

The Java command will also generate a <project name>.ipr file to allow the project to easily be
opened in IntelliJ 8.

Write new learning tests, naming each method with the intent of the lesson. Write the code that
makes a test pass. Write new tests for new concepts. 

Now run script/clean. Cleaners will reset test files by deleting 
method bodies. Can you complete the lesson from memory? If so, can you do so faster than before? 
If not, you may need to study the concept more closely. 

Repeat a test-driven lesson until you can easily rewrite it from scratch. Once you can do so, 
you may move on to another lesson. This is repetition with a retrieval step, which leads to 
long-term retention.

== SYNOPSIS:

shubox currently creates environments for Ruby and Java, but can easily be extended to any language that
lends itself to unit testing. shubox is built on newgem, so extending the framework is as simple as creating
new generator scripts.

== Application Architecture

Shubox is organized as a set of generators, as in newgem and RubiGen. 

app_generators are where we define the basic environment for one of our supported languages.

cleaner_generators hold the test framework cleaning implementations to reset tests. 
These can be mixed and matched to support polyglots like JRuby by installing both JUnit and test_unit
cleaners.

lib/cleaners/ hold the implementations of the cleaners referenced in the files copied to the sandbox. 
This makes it easy to upgrade existing shuboxes.


== REQUIREMENTS:

* newgem

== CREDITS:

Bobby Norton, DRW Trading Group

Dr. Nic Williams for newgem and rubigen: {RubyConf 2007 Presentation}[http://rubyconf2007.confreaks.com/d3t1p1_rubigen.html]

Jim Weirich and EdgeCase for {ruby_koans}[]

SCNA 2009, Chicago, IL

